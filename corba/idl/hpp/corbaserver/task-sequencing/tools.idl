// Copyright (c) 2023 CNRS
// Author: Florent Lamiraux
//

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#include <hpp/common.idl>

module hpp {
  module corbaserver {
    module task_sequencing {
      typedef double point3_t[3];
      struct Cluster {
	floatSeq centroid;
	floatSeqSeq points;
      };
      typedef sequence <Cluster> Clusters;
      
      interface Tools {
        /// Compute the distance of point to a mesh
        /// \param q configuration of the robot that determines the pose of
        ///        the mesh,
        /// \param p position of the point,
        /// \retval closest closest point on the mesh.
        /// \return distance
        double distanceToMesh(in floatSeq q, in point3_t p,
                              out point3_t closest) raises(Error);

	/// Cluster points by their position and direction
	/// \param points matrix of the coordinates of the points to be clustered
	/// \param nbRows the nb of points
	/// \param nbCols the nb of coordinates of a point
	/// \param c expected nb of clusters
	/// \param nc initial nb of clusters
	/// \param tn min size of a cluster
	/// \param te max variance of a cluster
	/// \param tc min distance between centroids
	/// \param nt max nb of merges per iteration
	/// \param ns max nb of iterations
	/// \param k significance factor of the angle in the task distance measure
	/// \retval result clusters obtained after applying the algorithm
	void isoData(in floatSeqSeq points, in long nbRows, in long nbCols,
			 in unsigned long c, in unsigned long nc, in unsigned long tn,
			 in double te, in double tc, in unsigned long nt, in unsigned long ns,
			 in double k,
			 out Clusters result)
	  raises(Error);

	/// Computes the distance matrix of the TSP model of a Robotic Task Sequencing Problem
	/// \param configs matrix of the configurations
	/// \param clusters matrix of the clusters of configurations per handle
	/// \param jointSpeeds vector of the maximal joint velocities
	/// \param q0 vector of the rest configuration of the robot
	/// \retval distances distance matrix for the problem
	void computeDistances(in floatSeqSeq configs, in intSeqSeq clusters,
			      in floatSeq jointSpeeds, in floatSeq q0,
			      out floatSeqSeq distances)
	  raises(Error);

	void setRobotArmIndices(in unsigned long start, in unsigned long size)
	  raises(Error);

	/// Computes the barycenter of a set of quaternions
	/// \param quaternions matrix of the set of quaternions
	/// \retval barycenter quaternion of the barycenter
	void quaternionBarycenter(in floatSeqSeq quaternions, out floatSeq barycenter)
	  raises(Error);
      }; // interface Tools
    }; // module task_sequencing
  }; // module corbaServer
}; // module hpp

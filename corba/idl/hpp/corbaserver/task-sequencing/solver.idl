// Copyright (c) 2023 CNRS
// Author: Florent Lamiraux
//

// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//
// 2. Redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
// DAMAGE.

#ifndef HPP_TASK_SEQUENCING_CORBA_SOLVER_HH
#define HPP_TASK_SEQUENCING_CORBA_SOLVER_HH

#include <hpp/common.idl>

module hpp {
  module corbaserver {
    module task_sequencing {
      interface Solver {
        /// Create a solver for several instances of the current robot
        ///
        /// \param nbInstances number of robot instances
        ///
        /// The single robot is the one stored in the problem solver
        void create(in unsigned long nbInstances) raises(Error);

        /// Set error threshold
        void setErrorThreshold(in double threshold) raises(Error);

        /// Set maximal number of iterations
        void setMaxIterations(in long iterations) raises(Error);

        /// Add constraint to one robot
        ///
        /// \param name constraint name
        /// \param index index of robot in the solver
        void addConstraint(in string name, in unsigned long index)
          raises(Error);

        /// Add an explicit equality constraint of a joint between two robots
        ///
        /// \param jointName name of the joint in the robot,
        /// \param index1, index2 indices of the robot instances
        ///
        /// The joint value in index1 instance is copied from the joint values
        /// in index2 instance.
        void addEqualityConstraint(in string jointName, in unsigned long index1,
                                   in unsigned long index2) raises(Error);
        /// Set right hand sides of constraints from an input vector
        ///
        /// Set right hand side of all parameterizable constraints with input
        /// value
        void setRightHandSideFromVector(in floatSeq input) raises(Error);

        /// Solve the set of constraints
        ///
        /// \param input initial guess,
        /// \retval output output of the solver (solution if success, last
        ///         iteration otherwise),
        /// \retval residualError residual error.
        boolean solve(in floatSeq input, out floatSeq output,
                      out floatSeq residualError) raises(Error);
        /// Print the solver in a string
        void display(out string solver) raises(Error);
      };
    }; // interface Solver
  }; // module task_sequencing
}; // module hpp

#endif // HPP_TASK_SEQUENCING_CORBA_SOLVER_HH


